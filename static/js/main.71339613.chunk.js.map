{"version":3,"sources":["components/TrelloCard.js","actions/listsActions.js","actions/cardsActions.js","actions/index.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","serviceWorker.js","reducers/listsReducer.js","reducers/index.js","store/index.js","index.js"],"names":["CardContainer","styled","div","TrelloCard","text","id","index","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","droggableId","DRAG_HAPPENED","addCard","listID","ADD_CARD","TrelloActionButton","state","formOpen","openForm","setState","renderAddButton","list","props","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","handleAddCard","renderForm","placeholder","buttonTitle","minHeight","minWidth","padding","autoFocus","onBlur","onChange","overflow","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","marginLeft","cursor","this","React","Component","display","alignItems","borderRadius","height","paddingLeft","marginTop","connect","ListContatiner","TrelloList","cards","droppableId","droppableProps","map","card","key","App","onDragEnd","result","destination","source","lists","direction","Boolean","window","location","hostname","match","cardID","initialState","listsReducer","action","newList","newCard","newState","splice","find","listStart","listEnd","combineReducers","store","createStore","listReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAKA,IAAMA,EAAgBC,IAAOC,IAAV,KAwBJC,EApBI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAC9B,OACE,kBAAC,IAAD,CAAWC,YAAaC,OAAOH,GAAKC,MAAOA,IACxC,SAAAG,GAAQ,OACP,kBAACT,EAAD,eACEU,IAAKD,EAASE,UACVF,EAASG,eACTH,EAASI,iBAEb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,GAAEb,U,0CClB3Bc,EAAU,SAAAC,GACrB,MAAO,CACLC,KAAMC,EAAUC,SAChBC,QAASJ,IAIAK,EAAO,SAClBC,EACAC,EACAC,EACAC,EACAC,EACAT,GAEA,MAAO,CACLA,KAAMC,EAAUS,cAChBP,QAAS,CACPE,mBACAC,iBACAC,sBACAC,oBACAC,cACAT,UCvBOW,EAAU,SAACC,EAAQ5B,GAC9B,MAAO,CACLgB,KAAMC,EAAUY,SAChBV,QAAS,CAAEnB,OAAM4B,YCFRX,EAAY,CACvBY,SAAU,WACVX,SAAU,WACVQ,cAAe,iBCAXI,E,2MACJC,MAAQ,CACNC,UAAU,EACVhC,KAAM,I,EAGRiC,SAAW,WACT,EAAKC,SAAS,CAAEF,UAAU,K,EAG5BG,gBAAkB,WAAO,IACfC,EAAS,EAAKC,MAAdD,KAEFE,EAAaF,EAAO,+DAAe,yDACnCG,EAAoBH,EAAO,EAAI,GAC/BI,EAAkBJ,EAAO,QAAU,UACnCK,EAAuBL,EAAO,kBAAoB,UAExD,OACE,yBACEM,QAAS,EAAKT,SACdU,MAAK,eACAC,EAAOC,oBADP,CAEHC,QAASP,EACTQ,MAAOP,EACPQ,gBAAiBP,KAGnB,kBAACQ,EAAA,EAAD,YACA,2BAAIX,K,EAKVY,UAAY,SAAAC,GACV,EAAKjB,SAAS,CAAEF,UAAU,K,EAG5BoB,kBAAoB,SAAAD,GAClB,EAAKjB,SAAS,CAAElC,KAAMmD,EAAEE,OAAOC,S,EAGjCC,cAAgB,WAAO,IACbC,EAAa,EAAKnB,MAAlBmB,SACAxD,EAAS,EAAK+B,MAAd/B,KAEJA,IACF,EAAKkC,SAAS,CACZlC,KAAM,KAERwD,EAAS1C,EAAQd,M,EAMrByD,cAAgB,WAAO,IAAD,EACS,EAAKpB,MAA1BmB,EADY,EACZA,SAAU5B,EADE,EACFA,OACV5B,EAAS,EAAK+B,MAAd/B,KAEJA,IACF,EAAKkC,SAAS,CACZlC,KAAM,KAERwD,EAAS7B,EAAQC,EAAQ5B,M,EAM7B0D,WAAa,WAAO,IACVtB,EAAS,EAAKC,MAAdD,KAEFuB,EAAcvB,EAChB,wEACA,oFAEEwB,EAAcxB,EAAO,uCAAW,uCAEtC,OACE,6BACE,kBAAC1B,EAAA,EAAD,CACEiC,MAAO,CACLkB,UAAW,GACXC,SAAU,IACVC,QAAS,gBAGX,kBAAC,IAAD,CACEJ,YAAaA,EACbK,WAAS,EACTC,OAAQ,EAAKf,UACbI,MAAO,EAAKvB,MAAM/B,KAClBkE,SAAU,EAAKd,kBACfT,MAAO,CACLwB,SAAU,SACVC,OAAQ,OACRC,MAAO,OACPC,QAAS,OACTC,OAAQ,WAId,yBAAK5B,MAAOC,EAAO4B,iBACjB,kBAACC,EAAA,EAAD,CACEC,YAAatC,EAAO,EAAKmB,cAAgB,EAAKE,cAC9CkB,QAAQ,YACRhC,MAAO,CAAEI,MAAO,QAASC,gBAAiB,YAEzCY,GAEH,kBAACX,EAAA,EAAD,CAAMN,MAAO,CAAEiC,WAAY,EAAGC,OAAQ,YAAtC,Y,wEAON,OAAOC,KAAK/C,MAAMC,SAAW8C,KAAKpB,aAAeoB,KAAK3C,sB,GAtHzB4C,IAAMC,WA0HjCpC,EAAS,CACbC,oBAAqB,CACnBoC,QAAS,OACTC,WAAY,SACZL,OAAQ,UACRM,aAAc,EACdC,OAAQ,GACRf,MAAO,IACPgB,YAAa,IAEfb,gBAAiB,CACfc,UAAW,EACXL,QAAS,OACTC,WAAY,WAIDK,gBAAUzD,G,qMC3IzB,IAAM0D,EAAiB3F,IAAOC,IAAV,KAyCL2F,EAhCI,SAAC,GAAqC,IAAnC1E,EAAkC,EAAlCA,MAAO2E,EAA2B,EAA3BA,MAAO9D,EAAoB,EAApBA,OAAQ1B,EAAY,EAAZA,MAC1C,OACE,kBAAC,IAAD,CAAWC,YAAaC,OAAOwB,GAAS1B,MAAOA,IAC5C,SAAAG,GAAQ,OACP,kBAACmF,EAAD,iBACMnF,EAASG,eADf,CAEEF,IAAKD,EAASE,UACVF,EAASI,iBAEb,kBAAC,IAAD,CAAWkF,YAAavF,OAAOwB,KAC5B,SAAAvB,GAAQ,OACP,yCAASA,EAASuF,eAAlB,CAAkCtF,IAAKD,EAASE,WAC9C,4BAAKQ,GACJ2E,EAAMG,KAAI,SAACC,EAAM5F,GAAP,OACT,kBAAC,EAAD,CACE6F,IAAKD,EAAK7F,GACVD,KAAM8F,EAAK9F,KACXC,GAAI6F,EAAK7F,GACTC,MAAOA,OAGX,kBAAC,EAAD,CAAoB0B,OAAQA,IAC3BvB,EAASsD,qB,gHC7B1B,IAAM6B,EAAiB3F,IAAOC,IAAV,KAKdkG,E,2MACJC,UAAY,SAAAC,GAAW,IACbC,EAA2CD,EAA3CC,YAAaC,EAA8BF,EAA9BE,OAAQjG,EAAsB+F,EAAtB/F,YAAaa,EAASkF,EAATlF,KAErCmF,GAIL,EAAK9D,MAAMmB,SACTpC,EACEgF,EAAOT,YACPQ,EAAYR,YACZS,EAAOlG,MACPiG,EAAYjG,MACZC,EACAa,K,wEAKI,IACAqF,EAAUvB,KAAKzC,MAAfgE,MAER,OACE,kBAAC,IAAD,CAAiBJ,UAAWnB,KAAKmB,WAC/B,6BACE,qCACA,kBAAC,IAAD,CAAWN,YAAY,YAAYW,UAAU,aAAatF,KAAK,SAC5D,SAAAX,GAAQ,OACP,kBAAC,EAAD,iBACMA,EAASuF,eADf,CAEEtF,IAAKD,EAASE,WAEb8F,EAAMR,KAAI,SAACzD,EAAMlC,GAAP,OACT,kBAAC,EAAD,CACE6F,IAAK3D,EAAKnC,GACVc,MAAOqB,EAAKrB,MACZ2E,MAAOtD,EAAKsD,MACZ9D,OAAQQ,EAAKnC,GACbC,MAAOA,OAGVG,EAASsD,YACV,kBAAC,EAAD,CAAoBvB,MAAI,c,GA3CtB4C,aAyDHO,eAJS,SAAAxD,GAAK,MAAK,CAChCsE,MAAOtE,EAAMsE,SAGAd,CAAyBS,GC1DpBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBF/E,EAAS,EACTgF,EAAS,EAEPC,EAAe,CACnB,CACE9F,MAAO,qBACPd,GAAG,QAAD,OAAU,GACZyF,MAAO,CACL,CACEzF,GAAG,QAAD,OAAU,GACZD,KAAM,4BAER,CACEC,GAAG,QAAD,OAAU,GACZD,KAAM,+CAIZ,CACEe,MAAO,qBACPd,GAAG,QAAD,OAAU,GACZyF,MAAO,CACL,CACEzF,GAAG,QAAD,OAAU,GACZD,KAAM,0BAER,CACEC,GAAG,QAAD,OAAU,GACZD,KAAM,qCA2EC8G,EArEM,WAAmC,IAAlC/E,EAAiC,uDAAzB8E,EAAcE,EAAW,uCACrD,OAAQA,EAAO/F,MACb,KAAKC,EAAUC,SACb,IAAM8F,EAAU,CACdjG,MAAOgG,EAAO5F,QACduE,MAAO,GACPzF,GAAG,QAAD,OAAU2B,IAGd,OADAA,GAAU,EACJ,GAAN,mBAAWG,GAAX,CAAkBiF,IACpB,KAAK/F,EAAUY,SACb,IAAMoF,EAAU,CACdjH,KAAM+G,EAAO5F,QAAQnB,KACrBC,GAAG,QAAD,OAAU2G,IAEdA,GAAU,EAEV,IAAMM,EAAWnF,EAAM8D,KAAI,SAAAzD,GACzB,OAAIA,EAAKnC,KAAO8G,EAAO5F,QAAQS,OACtB,eACFQ,EADL,CAEEsD,MAAM,GAAD,mBAAMtD,EAAKsD,OAAX,CAAkBuB,MAGlB7E,KAIX,OAAO8E,EAET,KAAKjG,EAAUS,cAAf,MAQMqF,EAAO5F,QANTE,EAFJ,EAEIA,iBACAC,EAHJ,EAGIA,eACAC,EAJJ,EAIIA,oBACAC,EALJ,EAKIA,kBAEAR,GAPJ,EAMIS,YANJ,EAOIT,MAEIkG,EAAQ,YAAOnF,GAErB,GAAa,SAATf,EAAiB,CACnB,IAAMoB,EAAO8E,EAASC,OAAO5F,EAAqB,GAElD,OADA2F,EAASC,OAAT,MAAAD,EAAQ,CAAQ1F,EAAmB,GAA3B,mBAAiCY,KAClC8E,EAIT,GAAI7F,IAAqBC,EAAgB,CAAC,IAAD,EACjCc,EAAOL,EAAMqF,MAAK,SAAAhF,GAAI,OAAIf,IAAqBe,EAAKnC,MACpD6F,EAAO1D,EAAKsD,MAAMyB,OAAO5F,EAAqB,IACpD,EAAAa,EAAKsD,OAAMyB,OAAX,SAAkB3F,EAAmB,GAArC,mBAA2CsE,KAI7C,GAAIzE,IAAqBC,EAAgB,CAAC,IAAD,EACjC+F,EAAYtF,EAAMqF,MAAK,SAAAhF,GAAI,OAAIf,IAAqBe,EAAKnC,MACzD6F,EAAOuB,EAAU3B,MAAMyB,OAAO5F,EAAqB,GACnD+F,EAAUvF,EAAMqF,MAAK,SAAAhF,GAAI,OAAId,IAAmBc,EAAKnC,OAC3D,EAAAqH,EAAQ5B,OAAMyB,OAAd,SAAqB3F,EAAmB,GAAxC,mBAA8CsE,KAGhD,OAAOoB,EAET,QACE,OAAOnF,IClGEwF,cAAgB,CAC7BlB,MAAOS,ICCMU,EAFDC,YAAYC,GCI1BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SJwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.71339613.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div`\n  margin-bottom: 8px;\n`;\n\nconst TrelloCard = ({ text, id, index }) => {\n  return (\n    <Draggable draggableId={String(id)} index={index}>\n      {provided => (\n        <CardContainer\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Card>\n            <CardContent>\n              <Typography gutterBottom>{text}</Typography>\n            </CardContent>\n          </Card>\n        </CardContainer>\n      )}\n    </Draggable>\n  );\n};\n\nexport default TrelloCard;\n","import { CONSTANTS } from \"../actions\";\n\nexport const addList = title => {\n  return {\n    type: CONSTANTS.ADD_LIST,\n    payload: title\n  };\n};\n\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  droggableId,\n  type\n) => {\n  return {\n    type: CONSTANTS.DRAG_HAPPENED,\n    payload: {\n      droppableIdStart,\n      droppableIdEnd,\n      droppableIndexStart,\n      droppableIndexEnd,\n      droggableId,\n      type\n    }\n  };\n};\n","import { CONSTANTS } from \"../actions\";\n\nexport const addCard = (listID, text) => {\n  return {\n    type: CONSTANTS.ADD_CARD,\n    payload: { text, listID }\n  };\n};\n","export * from \"./listsActions\";\nexport * from \"./cardsActions\";\n\nexport const CONSTANTS = {\n  ADD_CARD: \"ADD_CARD\",\n  ADD_LIST: \"ADD_LIST\",\n  DRAG_HAPPENED: \"DRAG_HAPPENED\"\n};\n","import React from \"react\";\nimport { Icon, Card, Button } from \"@material-ui/core\";\nimport Textarea from \"react-textarea-autosize\";\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nclass TrelloActionButton extends React.Component {\n  state = {\n    formOpen: false,\n    text: \"\"\n  };\n\n  openForm = () => {\n    this.setState({ formOpen: true });\n  };\n\n  renderAddButton = () => {\n    const { list } = this.props;\n\n    const buttonText = list ? \"もう一つリストを追加\" : \"さらにカードを追加\";\n    const buttonTextOpacity = list ? 1 : 0.5;\n    const buttonTextColor = list ? \"white\" : \"inherit\";\n    const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n\n    return (\n      <div\n        onClick={this.openForm}\n        style={{\n          ...styles.openFormButtonGroup,\n          opacity: buttonTextOpacity,\n          color: buttonTextColor,\n          backgroundColor: buttonTextBackground\n        }}\n      >\n        <Icon>add</Icon>\n        <p>{buttonText}</p>\n      </div>\n    );\n  };\n\n  closeForm = e => {\n    this.setState({ formOpen: false });\n  };\n\n  handleInputChange = e => {\n    this.setState({ text: e.target.value });\n  };\n\n  handleAddList = () => {\n    const { dispatch } = this.props;\n    const { text } = this.state;\n\n    if (text) {\n      this.setState({\n        text: \"\"\n      });\n      dispatch(addList(text));\n    }\n\n    return;\n  };\n\n  handleAddCard = () => {\n    const { dispatch, listID } = this.props;\n    const { text } = this.state;\n\n    if (text) {\n      this.setState({\n        text: \"\"\n      });\n      dispatch(addCard(listID, text));\n    }\n\n    return;\n  };\n\n  renderForm = () => {\n    const { list } = this.props;\n\n    const placeholder = list\n      ? \"リストのタイトルを入力...\"\n      : \"このカードにタイトルを入力...\";\n\n    const buttonTitle = list ? \"リストを追加\" : \"カードを追加\";\n\n    return (\n      <div>\n        <Card\n          style={{\n            minHeight: 80,\n            minWidth: 272,\n            padding: \"6px 8px 2px\"\n          }}\n        >\n          <Textarea\n            placeholder={placeholder}\n            autoFocus\n            onBlur={this.closeForm}\n            value={this.state.text}\n            onChange={this.handleInputChange}\n            style={{\n              overflow: \"hidden\",\n              resize: \"none\",\n              width: \"100%\",\n              outline: \"none\",\n              border: \"none\"\n            }}\n          />\n        </Card>\n        <div style={styles.formButtonGroup}>\n          <Button\n            onMouseDown={list ? this.handleAddList : this.handleAddCard}\n            variant=\"contained\"\n            style={{ color: \"white\", backgroundColor: \"#5aac44\" }}\n          >\n            {buttonTitle}\n          </Button>\n          <Icon style={{ marginLeft: 8, cursor: \"pointer\" }}>close</Icon>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n  }\n}\n\nconst styles = {\n  openFormButtonGroup: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    borderRadius: 3,\n    height: 36,\n    width: 272,\n    paddingLeft: 10\n  },\n  formButtonGroup: {\n    marginTop: 8,\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n};\n\nexport default connect()(TrelloActionButton);\n","import React from \"react\";\nimport TrelloCard from \"./TrelloCard\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst ListContatiner = styled.div`\n  background-color: #dfe3e6;\n  border-radius: 3px;\n  width: 300px;\n  padding: 8px;\n  height: 100%;\n  margin-right: 8px;\n`;\n\nconst TrelloList = ({ title, cards, listID, index }) => {\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n      {provided => (\n        <ListContatiner\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          {...provided.dragHandleProps}\n        >\n          <Droppable droppableId={String(listID)}>\n            {provided => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                <h4>{title}</h4>\n                {cards.map((card, index) => (\n                  <TrelloCard\n                    key={card.id}\n                    text={card.text}\n                    id={card.id}\n                    index={index}\n                  />\n                ))}\n                <TrelloActionButton listID={listID} />\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </ListContatiner>\n      )}\n    </Draggable>\n  );\n};\n\nexport default TrelloList;\n","import React, { Component } from \"react\";\nimport TrelloList from \"./TrelloList\";\nimport { connect } from \"react-redux\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"../actions\";\nimport styled from \"styled-components\";\n\nconst ListContatiner = styled.div`\n  display: flex;\n  flexdirection: row;\n`;\n\nclass App extends Component {\n  onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n\n  render() {\n    const { lists } = this.props;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div>\n          <h2>hello</h2>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {provided => (\n              <ListContatiner\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {lists.map((list, index) => (\n                  <TrelloList\n                    key={list.id}\n                    title={list.title}\n                    cards={list.cards}\n                    listID={list.id}\n                    index={index}\n                  />\n                ))}\n                {provided.placeholder}\n                <TrelloActionButton list />\n              </ListContatiner>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CONSTANTS } from \"../actions\";\n\nlet listID = 2;\nlet cardID = 5;\n\nconst initialState = [\n  {\n    title: \"未着手\",\n    id: `list-${0}`,\n    cards: [\n      {\n        id: `card-${0}`,\n        text: \"英語勉強\"\n      },\n      {\n        id: `card-${1}`,\n        text: \"Reactでアプリ作成\"\n      }\n    ]\n  },\n  {\n    title: \"処理中\",\n    id: `list-${1}`,\n    cards: [\n      {\n        id: `card-${3}`,\n        text: \"TypeScript勉強\"\n      },\n      {\n        id: `card-${4}`,\n        text: \"ブログ書く\"\n      }\n    ]\n  }\n];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n    case CONSTANTS.ADD_CARD: {\n      const newCard = {\n        text: action.payload.text,\n        id: `card-${cardID}`\n      };\n      cardID += 1;\n\n      const newState = state.map(list => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n\n      return newState;\n    }\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        droggableId,\n        type\n      } = action.payload;\n      const newState = [...state];\n\n      if (type === \"list\") {\n        const list = newState.splice(droppableIndexStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...list);\n        return newState;\n      }\n\n      //in the same list\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      // other list\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;\n","import { combineReducers } from \"redux\";\nimport listsReducer from \"./listsReducer\";\n\nexport default combineReducers({\n  lists: listsReducer\n});\n","import { createStore } from \"redux\";\nimport listReducers from \"../reducers\";\n\nconst store = createStore(listReducers);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}